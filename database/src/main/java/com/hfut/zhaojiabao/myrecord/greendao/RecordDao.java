package com.hfut.zhaojiabao.myrecord.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hfut.zhaojiabao.database.Record;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD".
*/
public class RecordDao extends AbstractDao<Record, Long> {

    public static final String TABLENAME = "RECORD";

    /**
     * Properties of entity Record.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RecordTime = new Property(0, Long.class, "recordTime", true, "_id");
        public final static Property Income = new Property(1, Boolean.class, "income", false, "INCOME");
        public final static Property Remark = new Property(2, String.class, "remark", false, "REMARK");
        public final static Property Category = new Property(3, String.class, "category", false, "CATEGORY");
        public final static Property CosumeTime = new Property(4, Long.class, "cosumeTime", false, "COSUME_TIME");
    }


    public RecordDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: recordTime
                "\"INCOME\" INTEGER," + // 1: income
                "\"REMARK\" TEXT," + // 2: remark
                "\"CATEGORY\" TEXT," + // 3: category
                "\"COSUME_TIME\" INTEGER);"); // 4: cosumeTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindLong(1, recordTime);
        }
 
        Boolean income = entity.getIncome();
        if (income != null) {
            stmt.bindLong(2, income ? 1L: 0L);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        Long cosumeTime = entity.getCosumeTime();
        if (cosumeTime != null) {
            stmt.bindLong(5, cosumeTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Record entity) {
        stmt.clearBindings();
 
        Long recordTime = entity.getRecordTime();
        if (recordTime != null) {
            stmt.bindLong(1, recordTime);
        }
 
        Boolean income = entity.getIncome();
        if (income != null) {
            stmt.bindLong(2, income ? 1L: 0L);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(3, remark);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(4, category);
        }
 
        Long cosumeTime = entity.getCosumeTime();
        if (cosumeTime != null) {
            stmt.bindLong(5, cosumeTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Record readEntity(Cursor cursor, int offset) {
        Record entity = new Record( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // recordTime
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // income
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // remark
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // category
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // cosumeTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Record entity, int offset) {
        entity.setRecordTime(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIncome(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setRemark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCosumeTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Record entity, long rowId) {
        entity.setRecordTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Record entity) {
        if(entity != null) {
            return entity.getRecordTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Record entity) {
        return entity.getRecordTime() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
